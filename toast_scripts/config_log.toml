# TOAST config
# Generated with version 3.0.0a3.dev6

[operators]
[operators.sim_satellite]
    class = "toast.ops.sim_satellite.SimSatellite"
    API = 0 # Internal interface version for this operator
    boresight = "boresight_radec" # Observation shared key for boresight
    det_data = "signal" # Observation detdata key to initialize
    det_data_units = "unit K" # Output units if creating detector data
    det_flags = "flags" # Observation detdata key for flags to initialize
    detset_key = "pixel" # If specified, use this column of the focalplane detector_data to group detectors
    distribute_time = false # Distribute observation data along the time axis rather than detector axis
    enabled = true # If True, this class instance is marked as enabled
    hwp_angle = "hwp_angle" # Observation shared key for HWP angle
    hwp_rpm = 46 # The rate (in RPM) of the HWP rotation
    hwp_step = "None" # For stepped HWP, the angle of each step
    hwp_step_time = "None" # For stepped HWP, the time between steps
    name = "sim_satellite" # The 'name' of this class instance
    position = "position" # Observation shared key for position
    prec_angle = "4.50000000000000e+01 deg" # The opening angle of the spin axis from the precession axis
    schedule = "None" # Instance of a SatelliteSchedule
    shared_flags = "flags" # Observation shared key for common flags
    spin_angle = "5.000000000000000e+01 deg" # The opening angle of the boresight from the spin axis
    telescope = "None" # This must be an instance of a Telescope
    times = "times" # Observation shared key for timestamps
    velocity = "velocity" # Observation shared key for velocity

[operators.default_model]
    class = "toast.ops.noise_model.DefaultNoiseModel"
    API = 0 # Internal interface version for this operator
    enabled = true # If True, this class instance is marked as enabled
    name = "default_model" # The 'name' of this class instance
    noise_model = "noise_model" # The observation key for storing the noise model

[operators.scan_temp]
    class = "toast.ops.scan_healpix.ScanHealpixMap"
    API = 0 # Internal interface version for this operator
    det_data = "template" # Observation detdata key for accumulating output
    det_data_units = "unit K" # Output units if creating detector data
    enabled = true # If True, this class instance is marked as enabled
    file ="/global/cfs/cdirs/litebird/simulations/TOAST_nasa_trl_sims/sky_templates/template_map_T_L4-140_top-hat_bpass_K_CMB.fits" # Path to healpix FITS file
    name = "scan_temp" # The 'name' of this class instance
    pixel_dist = "pixel_dist" # The Data key where the PixelDistribution object is located
    pixel_pointing = "None" # This must be an instance of a pixel pointing operator
    save_map = false # If True, do not delete map during finalize
    save_pointing = false # If True, do not clear detector pointing matrices if we generate the pixel distribution
    stokes_weights = "None" # This must be an instance of a Stokes weights operator
    subtract = false # If True, subtract the map timestream instead of accumulating
    zero = false # If True, zero the data before accumulating / subtracting

[operators.scan_map]
    class = "toast.ops.scan_healpix.ScanHealpixMap"
    API = 0 # Internal interface version for this operator
    det_data = "signal" # Observation detdata key for accumulating output
    enabled = false   # If True, this class instance is marked as enabled
    file = "/global/cfs/cdirs/litebird/simulations/TOAST_nasa_trl_sims/map_L4-140.fits" # Path to healpix FITS file
    name = "scan_map" # The 'name' of this class instance
    pixel_dist = "pixel_dist" # The Data key where the PixelDistribution object is located
    pixel_pointing = "None" # This must be an instance of a pixel pointing operator
    save_map = false # If True, do not delete map during finalize
    save_pointing = false # If True, do not clear detector pointing matrices if we generate the pixel distribution
    stokes_weights = "None" # This must be an instance of a Stokes weights operator
    subtract = false # If True, subtract the map timestream instead of accumulating
    zero = false # If True, zero the data before accumulating / subtracting




[operators.sim_noise]
    class = "toast.ops.sim_tod_noise.SimNoise"
    API = 0 # Internal interface version for this operator
    component = 0 # The noise component index
    det_data = "signal" # Observation detdata key for accumulating noise timestreams
    det_data_units = "unit K" # Desired output units of the timestream
    enabled = true       # If True, this class instance is marked as enabled
    name = "sim_noise" # The 'name' of this class instance
    noise_model = "noise_model" # Observation key containing the noise model
    realization = 0 # The noise realization index
    serial = true # Use legacy serial implementation instead of batched
    times = "times" # Observation shared key for timestamps

[operators.det_pointing]
    class = "toast.ops.pointing_detector.PointingDetectorSimple"
    API = 0 # Internal interface version for this operator
    boresight = "boresight_radec" # Observation shared key for boresight
    coord_in = "G" # The input boresight coordinate system ('C', 'E', 'G')
    coord_out = "G" # The output coordinate system ('C', 'E', 'G')
    enabled = true # If True, this class instance is marked as enabled
    name = "det_pointing" # The 'name' of this class instance
    quats = "quats" # Observation detdata key for output quaternions
    shared_flag_mask = 1 # Bit mask value for optional flagging
    shared_flags = "flags" # Observation shared key for telescope flags to use
    use_python = false # If True, use python implementation
    view = "None" # Use this view of the data in all observations

[operators.pixels]
    class = "toast.ops.pixels_healpix.PixelsHealpix"
    API = 0 # Internal interface version for this operator
    create_dist = "None" # Create the submap distribution for all detectors and store in the Data key specified
    detector_pointing = "None" # Operator that translates boresight pointing into detector frame
    enabled = true # If True, this class instance is marked as enabled
    name = "pixels" # The 'name' of this class instance
    nest = false # If True, use NESTED ordering instead of RING
    nside = 512 # The NSIDE resolution
    nside_submap = 16 # The NSIDE of the submap resolution
    pixels = "pixels" # Observation detdata key for output pixel indices
    quats = "None" # Observation detdata key for output quaternions
    single_precision = false # If True, use 32bit int in output
    use_python = false # If True, use python implementation
    view = "None" # Use this view of the data in all observations

[operators.weights]
    class = "toast.ops.stokes_weights.StokesWeights"
    API = 0 # Internal interface version for this operator
    cal = "None" # The observation key with a dictionary of pointing weight calibration for each det
    detector_pointing = "None" # Operator that translates boresight pointing into detector frame
    enabled = true # If True, this class instance is marked as enabled
    hwp_angle = "hwp_angle" # Observation shared key for HWP angle
    mode = "IQU" # The Stokes weights to generate (I or IQU)
    name = "weights" # The 'name' of this class instance
    quats = "None" # Observation detdata key for output quaternions
    single_precision = false # If True, use 32bit float in output
    use_python = false # If True, use python implementation
    view = "None" # Use this view of the data in all observations
    weights = "weights" # Observation detdata key for output weights
    
[operators.weights_temp]
    class = "toast.ops.stokes_weights.StokesWeights"
    API = 0 # Internal interface version for this operator
    cal = "None" # The observation key with a dictionary of pointing weight calibration for each det
    detector_pointing = "None" # Operator that translates boresight pointing into detector frame
    enabled = true # If True, this class instance is marked as enabled
    hwp_angle = "hwp_angle" # Observation shared key for HWP angle
    mode = "I" # The Stokes weights to generate (I or IQU)
    name = "weights_temp" # The 'name' of this class instance
    quats = "None" # Observation detdata key for output quaternions
    single_precision = false # If True, use 32bit float in output
    use_python = false # If True, use python implementation
    view = "None" # Use this view of the data in all observations
    weights = "weights_temp" # Observation detdata key for output weights    
[operators.beam_convolution]
    class = "toast.ops.conviqt.SimTEBConviqt"
    API = 0 # Internal interface version for this operator
    apply_flags = false # Only synthesize signal for unflagged samples.
    #beam_file = "expanded_beams/{detector}.fits" # File containing the beam a_lm expansion.  Tag {detector} will be replaced with the detector name.
    beam_file="/global/cfs/cdirs/litebird/simulations/TOAST_nasa_trl_sims/expanded_beams/L4-140/{detector}.fits" 
    calibrate = true # Calibrate intensity to 1.0, rather than (1 + epsilon) / 2. Calibrate has no effect if the beam is found to be normalized rather than scaled with the leakage factor.
    comm = "None" # MPI communicator to use for the convolution. libConviqt does not work without MPI.
    det_data = "signal" # Observation detdata key for accumulating convolved timestreams
    det_flag_mask = 1 # Bit mask value for optional detector flagging
    det_flags = "flags" # Observation detdata key for flags to use
    detector_pointing = "None" # Operator that translates boresight pointing into detector frame
    beammmax = 20# Beam maximum m.  Actual resolution in the Healpix FITS file may differ. If not set, will use the maximum expansion order from file. 
    lmax = 1024 # Maximum ell (and m).  Actual resolution in the Healpix FITS file may differ.  If not set, will use the maximum expansion order from file.
    dxx = false # The beam frame is either Dxx or Pxx. Pxx includes the rotation to polarization sensitive basis, Dxx does not. When Dxx=True, detector orientation from attitude quaternions is corrected for the polarization angle.
    enabled = false     # If True, this class instance is marked as enabled
    fwhm = "10 arcmin" # Width of a symmetric gaussian beam already present in the skyfile (will be deconvolved away).
    hwp_angle = "hwp_angle" # Observation shared key for HWP angle
    mc = "None" # Monte Carlo index used in synthesizing the input file names.
    name = "beam_convolution" # The 'name' of this class instance
    normalize_beam = false # Normalize beam to have unit response to temperature monopole.
    order = 11 # Conviqt order parameter (expert mode)
    pol = true # Toggle simulated signal polarization
    remove_dipole = false # Suppress the temperature dipole in sky_file.
    remove_monopole = false # Suppress the temperature monopole in sky_file.
    shared_flag_mask = 1 # Bit mask value for optional flagging
    shared_flags = "flags" # Observation shared key for telescope flags to use
    sky_file ="/global/cfs/cdirs/litebird/simulations/TOAST_nasa_trl_sims/sky_inputs_alm/L4-140/sky_alm_{detector}.fits" # File containing the sky a_lm expansion.  Tag {detector} will be replaced with the detector name
    verbosity = 0 # 
    view = "None" # Use this view of the data in all observations
    [operators.beam_convolution.beam_file_dict] # Dictionary of files containing the beam a_lm expansions. An entry for each detector name must be present. If provided, supersedes `beam_file`.
    [operators.beam_convolution.sky_file_dict] # Dictionary of files containing the sky a_lm expansions. An entry for each detector name must be present. If provided, supersedes `sky_file`.

[operators.save_hdf5]
    class = "toast.ops.save_hdf5.SaveHDF5"
    API = 0 # Internal interface version for this operator
    detdata = [] # Only save this list of detdata objects
    detdata_float32 = false # If True, convert any float64 detector data to float32 on write.
    enabled = false # If True, this class instance is marked as enabled
    force_serial = false # Use serial HDF5 operations, even if parallel support available
    intervals = [] # Only save this list of intervals objects
    meta = [] # Only save this list of meta objects
    name = "save_hdf5" # The 'name' of this class instance
    shared = [] # Only save this list of shared objects
    times = "times" # Observation shared key for timestamps
    volume = "toast_out_hdf5" # Top-level directory for the data volume

    [operators.save_hdf5.config] # Write this job config to the file

[operators.binner]
    class = "toast.ops.mapmaker_binning.BinMap"
    API = 0 # Internal interface version for this operator
    binned = "binned" # The Data key where the binned map should be stored
    covariance = "covariance" # The Data key containing the noise covariance PixelData instance
    det_data = "signal" # Observation detdata key for the timestream data
    det_data_units = "unit K" # Desired timestream units
    det_flag_mask = 1 # Bit mask value for optional detector flagging
    det_flags = "flags" # Observation detdata key for flags to use
    enabled = true # If True, this class instance is marked as enabled
    full_pointing = false # If True, expand pointing for all detectors and save
    name = "binner" # The 'name' of this class instance
    noise_model = "noise_model" # Observation key containing the noise model
    noiseweighted = "None" # The Data key where the noiseweighted map should be stored
    pixel_dist = "pix_dist" # The Data key where the PixelDist object should be stored
    pixel_pointing = "None" # This must be an instance of a pixel pointing operator
    pre_process = "None" # Optional extra operator to run prior to binning
    shared_flag_mask = 1 # Bit mask value for optional telescope flagging
    shared_flags = "flags" # Observation shared key for telescope flags to use
    stokes_weights = "None" # This must be an instance of a Stokes weights operator
    sync_type = "alltoallv" # Communication algorithm: 'allreduce' or 'alltoallv'

[operators.mapmaker]
    class = "toast.ops.mapmaker.MapMaker"
    API = 0 # Internal interface version for this operator
    binning = "None" # Binning operator used for solving template amplitudes
    convergence = 1e-12 #Relative convergence limit
    det_data = "signal" # Observation detdata key for the timestream data
    enabled = true # If True, this class instance is marked as enabled
    iter_max = 100 # Maximum number of iterations
    iter_min = 3 # Minimum number of iterations
    keep_final_products = false # If True, keep the map domain products in data after write
    keep_solver_products = false # If True, keep the map domain solver products in data
    map_binning = "None" # Binning operator for final map making.  Default is same as solver
    map_rcond_threshold = 1e-08 # For final map, minimum value for inverse pixel condition number cut.
    mask = "None" # Data key for pixel mask to use in solving.  First bit of pixel values is tested
    mc_index = "None" # The Monte-Carlo index
    mc_mode = false # If True, re-use solver flags, sparse covariances, etc
    name = "mapmaker" # The 'name' of this class instance
    output_dir = "." # Write output data products to this directory
    overwrite_cleaned = false # If True and save_cleaned is True, overwrite the input data
    report_memory = false # Report memory throughout the execution
    reset_pix_dist = false # Clear any existing pixel distribution.  Useful when applying repeatedly to different data objects.
    save_cleaned = false # If True, save the template-subtracted detector timestreams
    solve_rcond_threshold = 1e-08 # When solving, minimum value for inverse pixel condition number cut.
    template_matrix = "None" # This must be an instance of a template matrix operator
    write_binmap = true # If True, write the projected map *before* template subtraction
    write_cov = true # If True, write the white noise covariance matrices.
    write_hdf5 = false # If True, outputs are in HDF5 rather than FITS format.
    write_hdf5_serial = false # If True, force serial HDF5 write of output maps.
    write_hits = true # If True, write the hits map
    write_invcov = false # If True, write the inverse white noise covariance matrices.
    write_map = true # If True, write the projected map
    write_noiseweighted_map = false # If True, write the noise-weighted map
    write_rcond = true # If True, write the reciprocal condition numbers.
    write_solver_products = false # If True, write out equivalent solver products.

[operators.calibrator]
    class = "toast.ops.mapmaker.Calibrate"
    API = 0 # Internal interface version for this operator
    binning = "None" # Binning operator used for solving template amplitudes
    convergence = 1e-12 # Relative convergence limit
    det_data = "signal" # Observation detdata key for the timestream data
    enabled = false    # If True, this class instance is marked as enabled
    iter_max = 100 # Maximum number of iterations
    iter_min = 3 # Minimum number of iterations
    keep_solver_products = false # If True, keep the map domain solver products in data
    mask = "None" # Data key for pixel mask to use in solving.  First bit of pixel values is tested
    mc_index = "None" # The Monte-Carlo index
    mc_mode = false # If True, re-use solver flags, sparse covariances, etc
    name = "calibrator" # The 'name' of this class instance
    report_memory = false # Report memory throughout the execution
    reset_pix_dist = false # Clear any existing pixel distribution.  Useful when applying repeatedly to different data objects.
    result = "signal" # Observation detdata key for the output
    solve_rcond_threshold = 1e-08 # When solving, minimum value for inverse pixel condition number cut.
    template_matrix = "None" # This must be an instance of a template matrix operator

[operators.pixels_final]
    class = "toast.ops.pixels_healpix.PixelsHealpix"
    API = 0 # Internal interface version for this operator
    create_dist = "None" # Create the submap distribution for all detectors and store in the Data key specified
    detector_pointing = "None" # Operator that translates boresight pointing into detector frame
    enabled = false # If True, this class instance is marked as enabled
    name = "pixels_final" # The 'name' of this class instance
    nest = false  # If True, use NESTED ordering instead of RING
    nside = 512 # The NSIDE resolution
    nside_submap = 16 # The NSIDE of the submap resolution
    pixels = "pixels" # Observation detdata key for output pixel indices
    quats = "None" # Observation detdata key for output quaternions
    single_precision = false # If True, use 32bit int in output
    use_python = false # If True, use python implementation
    view = "None" # Use this view of the data in all observations
 

[operators.sim_crosstalk]
    class = "toast.ops.sim_crosstalk.CrossTalk"
    API = 0 # Internal interface version for this operator
    det_data = "signal" # Observation detdata key for the timestream data
    detector_ordering = "random" # Initialize Crosstalk matrix with detector ordering: `random, gap,constant` default `random` 
    enabled = true   # If True, this class instance is marked as enabled
    name = "sim_crosstalk" # The 'name' of this class instance
    realization = 0 # integer to set a different random seed 
    view = "None" # Use this view of the data in all observations
    xtalk_mat_file = "None" # CrossTalk matrix dictionary of dictionaries

[operators.mitigate_crosstalk]
    class = "toast.ops.sim_crosstalk.MitigateCrossTalk"
    API = 0 # Internal interface version for this operator
    det_data = "signal" # Observation detdata key for the timestream data
    enabled =   true  # If True, this class instance is marked as enabled
    error_coefficients = 0.001 # relative amplitude to simulate crosstalk errors on the inverse matrix 
    name = "mitigate_crosstalk" # The 'name' of this class instance
    realization = 0 # integer to set a different random seed 
    view = "None" # Use this view of the data in all observations
    xtalk_mat_file = "None" # CrossTalk matrix dictionary of dictionaries
    
[operators.sim_gscramble]
    class = "toast.ops.gainscrambler.GainScrambler"
    API = 0 # Internal interface version for this operator
    center = 1.0 # Gain distribution center
    component = 0 # Component index for this simulation
    det_data = "signal" # Observation detdata key to apply the gain error to
    enabled = true    # If True, this class instance is marked as enabled
    name = "sim_gscramble" # The 'name' of this class instance
    pattern = ".*" # Regex pattern to match against detector names. Only detectors that match the pattern are scrambled.
    realization = 0 # Realization index
    sigma = 0.0001 # Gain distribution width
    
[operators.sim_gdrifts]
    class = "toast.ops.sim_gaindrifts.GainDrifter"
    API = 0 # Internal interface version for this operator
    alpha_drift = 1.0 # spectral index  of the drift signal spectrum
    cutoff_freq = "2.00000000000000e-01 mHz" # cutoff  frequency to simulate a slow  drift (assumed < sampling rate)
    det_data = "signal" # Observation detdata key to inject the gain drift
    drift_mode = "slow_drift" # a string from [linear_drift, thermal_drift, slow_drift] to set the way the drift is modelled
    enabled = true     # If True, this class instance is marked as enabled
    fknee_drift = "2.00000000000000e+01 mHz" # fknee of the drift signal
    focalplane_group = "wafer" # focalplane table column to use for grouping detectors: can be any string like "wafer", "pixel"
    include_common_mode = false # If True, inject a common drift to all the local detector group 
    name = "sim_gdrifts" # The 'name' of this class instance
    sigma_drift = 1e-4 # dimensionless amplitude  of the drift signal, (for `thermal_drift` corresponds to the thermal fluctuation level in K units)
 

[operators.sim_thermdrifts]
    class = "toast.ops.sim_gaindrifts.GainDrifter"
    API = 0 # Internal interface version for this operator
    alpha_drift = 1.8 # spectral index  as in the PTEP and Dominc's post 
    det_data = "signal" # Observation detdata key to inject the gain drift
    detector_mismatch = 0.1 # mismatch between detectors for `thermal_drift` and `slow_drift` ranging from 0 to 1. Default value implies no common mode injected
    drift_mode = "thermal_drift" # a string from [linear_drift, thermal_drift, slow_drift] to set the way the drift is modelled
    enabled = true      # If True, this class instance is marked as enabled
    fknee_drift = " 1 Hz" # as in the PTEP 
    focalplane_Tbath = "100 mK" # temperature of the focalplane for `thermal_drift` 
    focalplane_group = "wafer" # focalplane table column to use for grouping detectors: can be any string like "wafer", "pixel"
    include_common_mode = true  # If True, inject a common drift to all the local detector group 
    name = "sim_thermdrifts" # The 'name' of this class instance
    thermal_fluctuation_amplitude = "1.00 uK" # Amplitude of thermal fluctuation for `thermal_drift` in  Kelvin units
    
    


[operators.sim_cosmicrays]
    class = "toast.ops.sim_cosmic_rays.InjectCosmicRays"
    API = 0 # Internal interface version for this operator
    conversion_factor = "5.73e12 K/W" # factor to convert the cosmic ray signal (usually Watts) into temperature units
    crdata_units = "unit W" # set the unities of the input amplitudes 
    crfile = "/global/cfs/cdirs/litebird/simulations/TOAST_nasa_trl_sims/input_data/cosmic_ray_glitches.npz" # Path to the *.npz file encoding cosmic ray infos
    det_data = "signal" # Observation detdata key to inject the gain drift
    enabled = true     # If True, this class instance is marked as enabled
    eventrate = 0.0015 # the expected event rate of hits in a detector
    include_common_mode = false # will include also common mode per pixel pair  if set to True
    inject_direct_hits = true # inject  direct hits as glitches in the TODs
    name = "sim_cosmicrays" # The 'name' of this class instance
    realization = 0 # integer to set a different random seed 

[operators.convolve_time_constant]
    class = "toast.ops.time_constant.TimeConstant"
    API = 0 # Internal interface version for this operator
    deconvolve = true  # Deconvolve the time constant instead.
    det_data = "signal" # Observation detdata key apply filtering to
    enabled = true   # If True, this class instance is marked as enabled
    name = "convolve_time_constant" # The 'name' of this class instance
    realization = 0 # Realization ID, only used if tau_sigma is nonzero
    tau = "1 ms" # Time constant to apply to all detectors.  Overrides `tau_name`
    tau_name = "None" # Key to use to find time constants in the Focalplane.
    tau_sigma = "None" # Randomized fractional error to add to each time constant.
    
[operators.deconvolve_time_constant]
    class = "toast.ops.time_constant.TimeConstant"
    API = 0 # Internal interface version for this operator
    deconvolve = true # Deconvolve the time constant instead.
    det_data = "signal" # Observation detdata key apply filtering to
    enabled = true # If True, this class instance is marked as enabled
    name = "deconvolve_time_constant" # The 'name' of this class instance
    realization = 0 # Realization ID, only used if tau_sigma is nonzero
    tau = "1 ms" # Time constant to apply to all detectors.  Overrides `tau_name`
    tau_name = "None" # Key to use to find time constants in the Focalplane.
    tau_sigma = 0.1  # Randomized fractional error to add to each time constant.



[templates]
[templates.baselines]
    class = "toast.templates.offset.Offset"
    data = "None" # This must be an instance of a Data class (or None)
    det_data = "signal" # Observation detdata key for the timestream data
    det_data_units = "unit K" # Desired timestream units
    det_flag_mask = 1 # Bit mask value for solver flags
    det_flags = "flags" # Observation detdata key for solver flags to use
    enabled = true # If True, this class instance is marked as enabled
    good_fraction = 0.5 # Fraction of unflagged samples needed to keep a given offset amplitude
    name = "baselines" # The 'name' of this class instance
    noise_model = "None" # Observation key containing the optional noise model
    precond_width = 20 # Preconditioner width in terms of offsets / baselines
    step_time = "60 s" # Time per baseline step
    times = "times" # Observation shared key for timestamps
    use_accel = false # If True, use the accelerator
    use_noise_prior = false # Use detector PSDs to build the noise prior and preconditioner
    use_python = false # If True, use python implementation
    view = "None" # Use this view of the data in all observations

[templates.gain_amplitudes]
    class = "toast.templates.gaintemplate.GainTemplate"
    data = "None" # This must be an instance of a Data class (or None)
    det_data = "signal" # Observation detdata key for the timestream data
    det_data_units = "unit K" # Desired timestream units
    det_flag_mask = 1 # Bit mask value for solver flags
    det_flags = "flags" # Observation detdata key for solver flags to use
    enabled = true         # If True, this class instance is marked as enabled
    name = "gain_amplitudes" # The 'name' of this class instance
    noise_model = "None" # Observation key containing the   noise model 
    order = 4 # The order of Legendre polynomials to fit the gain amplitudes 
    template_name = "template" # detdata key encoding the signal estimate to fit the gain amplitudes
    use_accel = false # If True, use the accelerator
    view = "None" # Use this view of the data in all observations
